error: [Prusti: verification error] the sequence index may be out of bounds
  --> $DIR/sequences.rs:10:20
   |
10 |     prusti_assert!(seq[idx] == seq[idx]);
   |                    ^^^^^^^^^^^^^^^^^^^^
   |
note: the failing assertion is here
  --> $DIR/sequences.rs:10:20
   |
10 |     prusti_assert!(seq[idx] == seq[idx]);
   |                    ^^^^^^^^^^^^^^^^^^^^
note: counterexample for "seq"
       value:   Seq(?, )
  --> $DIR/sequences.rs:8:10
   |
8  | fn test1(seq: Seq<i32>, idx: usize) {
   |          ^^^
note: counterexample for "idx"
       value:   1
  --> $DIR/sequences.rs:8:25
   |
8  | fn test1(seq: Seq<i32>, idx: usize) {
   |                         ^^^

error: [Prusti: verification error] the asserted expression might not hold
  --> $DIR/sequences.rs:22:20
   |
22 |     prusti_assert!(seq[2] == 4);
   |                    ^^^^^^^^^^^
   |
note: the failing assertion is here
  --> $DIR/sequences.rs:22:20
   |
22 |     prusti_assert!(seq[2] == 4);
   |                    ^^^^^^^^^^^
note: counterexample for "seq"
       value:   Seq(1, ?, 3, ?, ?, )
  --> $DIR/sequences.rs:21:15
   |
21 |     let seq = seq![1, 2, 3, 4, 5];
   |               ^^^^^^^^^^^^^^^^^^^
   = note: this error originates in the macro `seq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: [Prusti: verification error] the asserted expression might not hold
  --> $DIR/sequences.rs:28:20
   |
28 |     prusti_assert!(seq == Seq::concat(Seq::single(a), Seq::single(b)));
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
note: the failing assertion is here
  --> $DIR/sequences.rs:28:20
   |
28 |     prusti_assert!(seq == Seq::concat(Seq::single(a), Seq::single(b)));
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: counterexample for "a"
       value:   -2147475929
  --> $DIR/sequences.rs:26:10
   |
26 | fn test4(a: i32, b: i32, seq: Seq<i32>) {
   |          ^
note: counterexample for "b"
       value:   -2147483610
  --> $DIR/sequences.rs:26:18
   |
26 | fn test4(a: i32, b: i32, seq: Seq<i32>) {
   |                  ^
note: counterexample for "seq"
       value:   Seq(?, ?, )
  --> $DIR/sequences.rs:26:26
   |
26 | fn test4(a: i32, b: i32, seq: Seq<i32>) {
   |                          ^^^

error: aborting due to 3 previous errors

