Analyzing file $DIR/fields.rs using DefinitelyAccessibleAnalysis...
Result for function main():
{
  "bb0": [
    [
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: StorageLive(_1)"
      ]
    ],
    "state before terminator:",
    {
      "accessible": [],
      "owned": []
    },
    "terminator: _1 = <T as std::default::Default>::default() -> [return: bb1, unwind: bb6]",
    {
      "bb1": [
        "state:",
        {
          "accessible": [],
          "owned": []
        }
      ],
      "bb6": [
        "state:",
        {
          "accessible": [],
          "owned": []
        }
      ]
    }
  ],
  "bb1": [
    [
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: FakeRead(ForLet(None), _1)"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: StorageLive(_2)"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: StorageLive(_3)"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: _3 = (_1.0: u32)"
      ]
    ],
    "state before terminator:",
    {
      "accessible": [],
      "owned": []
    },
    "terminator: _2 = std::mem::drop::<u32>(move _3) -> [return: bb2, unwind: bb6]",
    {
      "bb2": [
        "state:",
        {
          "accessible": [],
          "owned": []
        }
      ],
      "bb6": [
        "state:",
        {
          "accessible": [],
          "owned": []
        }
      ]
    }
  ],
  "bb2": [
    [
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: StorageDead(_3)"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: StorageDead(_2)"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: StorageLive(_4)"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: _4 = &mut (_1.1: u32)"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: FakeRead(ForLet(None), _4)"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: StorageLive(_5)"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: _5 = &_4"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: FakeRead(ForLet(None), _5)"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: StorageLive(_6)"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: _6 = &mut (_1.2: u32)"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: FakeRead(ForLet(None), _6)"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: StorageLive(_7)"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: StorageLive(_8)"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: _8 = move _6"
      ]
    ],
    "state before terminator:",
    {
      "accessible": [],
      "owned": []
    },
    "terminator: _7 = std::mem::drop::<&mut u32>(move _8) -> [return: bb3, unwind: bb6]",
    {
      "bb3": [
        "state:",
        {
          "accessible": [],
          "owned": []
        }
      ],
      "bb6": [
        "state:",
        {
          "accessible": [],
          "owned": []
        }
      ]
    }
  ],
  "bb3": [
    [
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: StorageDead(_8)"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: StorageDead(_7)"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: StorageLive(_9)"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: StorageLive(_10)"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: _10 = _5"
      ]
    ],
    "state before terminator:",
    {
      "accessible": [],
      "owned": []
    },
    "terminator: _9 = std::mem::drop::<&&mut u32>(move _10) -> [return: bb4, unwind: bb6]",
    {
      "bb4": [
        "state:",
        {
          "accessible": [],
          "owned": []
        }
      ],
      "bb6": [
        "state:",
        {
          "accessible": [],
          "owned": []
        }
      ]
    }
  ],
  "bb4": [
    [
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: StorageDead(_10)"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: StorageDead(_9)"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: (_1.0: u32) = const 123_u32"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: StorageLive(_11)"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: StorageLive(_12)"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: _12 = move _1"
      ]
    ],
    "state before terminator:",
    {
      "accessible": [],
      "owned": []
    },
    "terminator: _11 = std::mem::drop::<T>(move _12) -> [return: bb5, unwind: bb6]",
    {
      "bb5": [
        "state:",
        {
          "accessible": [],
          "owned": []
        }
      ],
      "bb6": [
        "state:",
        {
          "accessible": [],
          "owned": []
        }
      ]
    }
  ],
  "bb5": [
    [
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: StorageDead(_12)"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: StorageDead(_11)"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: _0 = const ()"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: StorageDead(_6)"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: StorageDead(_5)"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: StorageDead(_4)"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: StorageDead(_1)"
      ]
    ],
    "state before terminator:",
    {
      "accessible": [],
      "owned": []
    },
    "terminator: return",
    {}
  ],
  "bb6": [
    [],
    "state before terminator:",
    {
      "accessible": [],
      "owned": []
    },
    "terminator: resume",
    {}
  ]
}
