name: Test

on:
  push:
    branches: [master, staging, trying]
    paths-ignore: 'docs/**'
  pull_request:
    branches: [master]
    paths-ignore: 'docs/**'

env:
  RUST_BACKTRACE: 1
  PRUSTI_ASSERT_TIMEOUT: 60000

jobs:
  # Check formatting
  fmt-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Cache cargo
        uses: Swatinem/rust-cache@v1.3.0
      - name: Check formatting
        run: |
          rustup component add rustfmt
          python ./x.py fmt-check-all

  # Run clippy checks
  clippy-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '15'
      - name: Set up the environment
        run: python x.py setup
      - name: Cache cargo
        uses: Swatinem/rust-cache@v1.3.0
      - uses: actions/download-artifact@v2
        with:
          name: build-debug-${{ matrix.os }}
      - name: Check and report Clippy errors
        run: |
          python ./x.py clippy -- -D warnings

  # Check that we depend on the compiler only through SMIR.
  smir-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Check and report illegal extern crate.
        run: |
          python ./x.py check-smir

  # Compile in debug mode
  build-debug:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '15'
      - name: Set up the environment
        run: python x.py setup
      - name: Cache cargo
        uses: Swatinem/rust-cache@v1.3.0
      - name: Build with cargo
        run: python x.py build --all
      - name: Upload Prusti artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-debug-${{ matrix.os }}
          if-no-files-found: error
          path: target/

  # Run a subset of the tests that used to fail often.
  # The goal here is to fail fast and give quick feedback to the developers.
  quick-tests:
    needs: build-debug
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '15'
      - name: Set up the environment
        run: python x.py setup
      - name: Cache cargo
        uses: Swatinem/rust-cache@v1.3.0
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-debug-ubuntu-latest
      - name: Run quick tests
        run: python x.py test --all --verbose quick

  # Run a subset of the tests with the purification optimization enabled
  # to ensure that we do not introduce regressions.
  purification-tests:
    needs: build-debug
    runs-on: ubuntu-latest
    env:
      PRUSTI_ENABLE_PURIFICATION_OPTIMIZATION: true
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '15'
      - name: Set up the environment
        run: python x.py setup
      - name: Cache cargo
        uses: Swatinem/rust-cache@v1.3.0
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-debug-ubuntu-latest
      - name: Run quick tests
        run: |
          python x.py verify-test prusti-tests/tests/verify/pass/rosetta/Knuth_shuffle.rs
          # python x.py test --all --verbose pass/rosetta/Binary_search_shared.rs
          # python x.py test --all --verbose pass/demos/account.rs
          # python x.py test --all --verbose pass/rosetta/Knights_tour.rs
          # python x.py test --all --verbose pass/quick/fold-unfold.rs
          # python x.py test --all --verbose pass/quick/moves.rs
          # python x.py test --all --verbose pass/quick/mut-borrows.rs
          # python x.py test --all --verbose pass/quick/shared-borrows.rs
          # python x.py test --all --verbose pass/quick/trait-contracts-refinement.rs
          # python x.py test --all --verbose pass/quick/fibonacci.rs
          # python x.py test --all --verbose pass/pure-fn/len-lookup.rs
          # python x.py test --all --verbose pass/pure-fn/quantifiers.rs
          # python x.py test --all --verbose pass/pure-fn/recursive-pure-fn.rs
          # python x.py test --all --verbose pass/pure-fn/ref-mut-arg.rs
          # python x.py test --all --verbose pass/rosetta/Ackermann_function.rs
          # python x.py test --all --verbose pass/rosetta/Heapsort.rs
      - name: Run with purification.
        env:
          PRUSTI_VIPER_BACKEND: silicon
          PRUSTI_VERIFY_SPECIFICATIONS_BACKEND: silicon
          PRUSTI_VERIFY_CORE_PROOF: true
          PRUSTI_VERIFY_SPECIFICATIONS: true
          PRUSTI_VERIFY_SPECIFICATIONS_WITH_CORE_PROOF: false
          PRUSTI_INLINE_CALLER_FOR: false
        run: |
          python x.py test core_proof
      - name: Run with purification with Carbon.
        env:
          PRUSTI_VIPER_BACKEND: silicon
          PRUSTI_VERIFY_SPECIFICATIONS_BACKEND: carbon
          PRUSTI_VERIFY_CORE_PROOF: true
          PRUSTI_VERIFY_SPECIFICATIONS: true
          PRUSTI_VERIFY_SPECIFICATIONS_WITH_CORE_PROOF: false
          PRUSTI_INLINE_CALLER_FOR: false
        run: |
          python x.py test core_proof
      - name: Run without purification.
        env:
          PRUSTI_VIPER_BACKEND: silicon
          PRUSTI_VERIFY_SPECIFICATIONS_BACKEND: silicon
          PRUSTI_VERIFY_CORE_PROOF: true
          PRUSTI_VERIFY_SPECIFICATIONS: true
          PRUSTI_VERIFY_SPECIFICATIONS_WITH_CORE_PROOF: true
          PRUSTI_INLINE_CALLER_FOR: false
        run: |
          python x.py test core_proof
      - name: Inline caller for functions
        env:
          PRUSTI_VIPER_BACKEND: silicon
          PRUSTI_VERIFY_SPECIFICATIONS_BACKEND: silicon
          PRUSTI_VERIFY_CORE_PROOF: true
          PRUSTI_VERIFY_SPECIFICATIONS: true
          PRUSTI_VERIFY_SPECIFICATIONS_WITH_CORE_PROOF: false
          PRUSTI_INLINE_CALLER_FOR: true
        run: |
          python x.py test core_proof

  # Run all the tests.
  all-tests:
    needs: [fmt-check, clippy-check, smir-check, build-debug, quick-tests]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '15'
      - name: Set up the environment
        run: python x.py setup
      - name: Cache cargo
        uses: Swatinem/rust-cache@v1.3.0
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-debug-${{ matrix.os }}
      - name: Run cargo tests
        run: python x.py test --all --verbose
      - name: Run a subset of tests with Carbon
        run: |
            python x.py test pass/no-annotation --all --verbose
        env:
          PRUSTI_VIPER_BACKEND: carbon
      - name: Check prusti-contracts
        run: |
          cd prusti-contracts/prusti-contracts-test/
          cargo +stable build

  # Run Prusti on itself. Currently disabled because of many bugs in Prusti.
  test-on-prusti:
    needs: [fmt-check, clippy-check, smir-check, build-debug, quick-tests]
    runs-on: ubuntu-latest
    #if: false
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '15'
      - name: Set up the environment
        run: python x.py setup
      - name: Cache cargo
        uses: Swatinem/rust-cache@v1.3.0
      - name: Build with cargo
        run: python x.py build --release --all
      - name: Run cargo-prusti on Prusti
        run: python x.py prusti
        env:
          LD_LIBRARY_PATH: target/release:${{ env.LD_LIBRARY_PATH }}
          PRUSTI_SKIP_UNSUPPORTED_FEATURES: true
          PRUSTI_FULL_COMPILATION: true
          PRUSTI_CHECK_PANICS: false

  # Test cargo-prusti on a collection of crates.
  test-crates:
    needs: [fmt-check, clippy-check, smir-check, build-debug, quick-tests]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        shard_index: [0, 1, 2, 3]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Setup Python 3
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - uses: actions/setup-java@v1
        with:
          java-version: '15'
      - name: Set up the environment
        run: python x.py setup
      - name: Cache cargo
        uses: Swatinem/rust-cache@v1.3.0
      - name: Build with cargo --release
        run: python x.py build --release --all
      - name: Test Prusti on a collection of crates
        run: ./target/release/test-crates --fail-fast --num-shards=4 --shard-index=${{ matrix.shard_index }}
